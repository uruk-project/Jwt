parameters:
  name: ''
  vmImage: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: '${{ parameters.name }} build and test'
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
      matrix:
        debug-build:
          BUILD_CONFIG: Debug
        release-build:
          BUILD_CONFIG: Release
    steps:
      - task: DotNetCoreInstaller@0
        inputs:
          packageType: sdk
          version: $(SDK_VERSION)
        displayName: Install dotnet cli

      - task: NuGetToolInstaller@0
        displayName: Install NuGet tool
      
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
        displayName: Restore packages
      
      - task: DotNetCoreCLI@2
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
        displayName: Build
          
      - task: DotNetCoreCLI@2
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
          publishTestResults: true
        displayName: Tests

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '$(Agent.TempDirectory)**/*.trx'
        displayName: Publish tests results

      - task: DotNetCoreCLI@2
        inputs:
          command: 'pack'
          configuration: $(buildConfiguration)
          packagesToPack: '**/*.csproj'
          nobuild: false     
          packDirectory:  'NuGet-Packed'
        condition: and( succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['BUILD_CONFIG'], 'Release' ) )
        displayName: Pack NuGet

      - task: PublishBuildArtifacts@1
        condition: and( succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['BUILD_CONFIG'], 'Release' ), ne( variables['Build.Reason'], 'PullRequest' ) )
        inputs:
          pathtoPublish: 'NuGet-Packed'
          artifactName: 'NuGet-Packed'