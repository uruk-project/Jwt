name: .NET Core CI/CD 
on:
  push:
    branches:
      - master
    tags:
      - v*
    paths:
      - '**'
      - '!**.md'
  pull_request:
    paths:
      - '**'
      - '!**.md'

jobs:
  build:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        configuration: [ Debug, Release ]
        include:
          - os: ubuntu-latest
            configuration: Release
            is-main: true
          - os: windows-latest
            configuration: Release
            is-netfx: true
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
#      COMPlus_EnableAVX: 0
#      COMPlus_EnableSSE: 0
    steps:
      - uses: actions/checkout@master
#      - name: setup dotnet '2.0.x'
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: '2.0.x'
#      - name: setup dotnet '2.2.x'
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: '2.2.x'
      - name: Setup dotnet '3.1.x'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: DOTNET HACK
#  https://github.com/actions/setup-dotnet/issues/25
        shell: pwsh
        run: |
            $version = Split-Path (Split-Path $ENV:DOTNET_ROOT -Parent) -Leaf;
            $root = Split-Path (Split-Path $ENV:DOTNET_ROOT -Parent) -Parent;
            $directories = Get-ChildItem $root | Where-Object { $_.Name -ne $version };
            foreach ($dir in $directories) {
              $from = $dir.FullName;
              $to = "$root/$version";
              Write-Host Copying from $from to $to;
              Copy-Item "$from\*" $to -Recurse -Force;
            }
          
      - name: Build
        run: dotnet build -c ${{ matrix.configuration }}

      - name: Test
        run: dotnet test -c ${{ matrix.configuration }} --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      - name: Upload test results to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: '**/coverage.opencover.xml'
          
      - name: Creates NuGet packages
        if: matrix.is-main
        run: dotnet pack -c ${{ matrix.configuration }} --output=nuget_packed --no-build
      - name: Upload NuGet packages to Artifacts
        if: matrix.is-main
        uses: actions/upload-artifact@v2
        with:
          name: nuget-packages
          path: nuget_packed/*.nupkg


  publish:
    name: Publish packages
    if: contains(github.ref, 'tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - name: Download generated NuGet packages
        uses: actions/download-artifact@v2
        with:
          name: nuget-packages
      - name: Push packages to api.nuget.org
        run: dotnet nuget push **/*.nupkg --api-key=${{ secrets.NUGET_APIKEY }} --source=https://api.nuget.org/v3/index.json --skip-duplicate

  publish-test:
    name: Publish tests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download generated test results
        uses: actions/download-artifact@v2
        with:
          name: test-results

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
